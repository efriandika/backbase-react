{"version":3,"sources":["components/weather/Weather.module.scss","components/weather-list/WeatherList.module.scss","components/weather/Weather.js","libs/unit/hooks/useTemperatureUnit.js","libs/unit/hooks/useSpeedUnit.js","components/weather-list/WeatherList.js","pages/dashboard/Dashboard.js"],"names":["module","exports","Weather","className","units","cityName","onClick","useHttp","manual","data","loading","error","fetchData","cancelRequest","textTemperatureUnit","useSelector","state","weather","text","useTemperatureUnit","textSpeedUnit","useSpeedUnit","q","a","url","params","console","useEffect","fetchWeatherData","styles","container","coord","lon","lat","name","length","weatherIcon","src","icon","alt","main","temperature","temp","city","country","sys","title","role","aria-label","humidity","wind","speed","response","status","message","Skeleton","width","height","defaultProps","WeatherList","cities","onCityClick","onNewCitySubmit","useState","newCityName","setNewCityName","map","index","newCityForm","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","disabled","Dashboard","dispatch","useDispatch","app","openWeatherForecast","addCity"],"mappings":"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","file":"static/js/3.58b67f3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__pvPvo\",\"temperature\":\"Weather_temperature__35WZz\",\"city\":\"Weather_city__1RdlU\",\"country\":\"Weather_country__PZFQu\",\"weatherIcon\":\"Weather_weatherIcon__ZyqDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newCityForm\":\"WeatherList_newCityForm__1mmQm\"};","import PropTypes from 'prop-types';\nimport styles from './Weather.module.scss';\nimport { useEffect } from 'react';\nimport { useHttp } from '../../libs/http/hooks/useHttp';\nimport { useTemperatureUnit } from '../../libs/unit/hooks/useTemperatureUnit';\nimport { useSpeedUnit } from '../../libs/unit/hooks/useSpeedUnit';\nimport { Skeleton } from '../skeleton/Skeleton';\n\nexport function Weather({ className, units, cityName, onClick }) {\n  const [{ data, loading, error }, fetchData, cancelRequest] = useHttp({}, { manual: true });\n  const textTemperatureUnit = useTemperatureUnit();\n  const textSpeedUnit = useSpeedUnit();\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    fetchWeatherData(cityName, units);\n    return () => cancelRequest();\n  }, [cityName, units]);\n  /* eslint-enabled react-hooks/exhaustive-deps */\n\n  async function fetchWeatherData(q, units) {\n    try {\n      await fetchData({\n        url: '/weather',\n        params: {\n          q,\n          units\n        },\n      });\n    } catch (e) {\n      console.error('Failed to get weather data from the server!');\n    }\n  }\n\n  function renderWeatherIcon() {\n    if (data.weather.length > 0) {\n      return (<img className={styles.weatherIcon} src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt={data.weather[0].main} />);\n    } else {\n      return null;\n    }\n  }\n\n  function renderSkeleton() {\n    return (\n      <div className={`${className} ${styles.container}`}>\n        <div className={styles.temperature}><Skeleton width=\"40%\" height=\"46px\" className=\"mb-2\" /></div>\n\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}><Skeleton width=\"45%\" /></div>\n          <div className={styles.country}><Skeleton width=\"30%\" /></div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <Skeleton width=\"55px\" />\n          </div>\n          <div title=\"Wind Speed\">\n            <Skeleton width=\"70px\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderData() {\n    return (\n      <div className={`${className} ${styles.container} cursor-pointer`} onClick={() => onClick(data.coord.lon, data.coord.lat, data.name)}>\n        {renderWeatherIcon()}\n\n        <div className={styles.temperature}>{textTemperatureUnit(data.main.temp)}</div>\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}>{data.name}</div>\n          <div className={styles.country}>{data.sys.country}</div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <i className=\"bi bi-droplet\" role=\"img\" aria-label=\"Humidity\" /> {data.main.humidity}%\n          </div>\n          <div title=\"Wind Speed\">\n            <i className=\"bi bi-wind\" role=\"img\" aria-label=\"Wind Speed\" /> {textSpeedUnit(data.wind.speed)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderErrorResponse() {\n    if (error) {\n      return (\n        <div className={`${className} ${styles.container} text-danger`}>\n          Data cannot be loaded from the server.<br />\n          {(error.response.status === 404) ? (\n            <>\n              <strong>{cityName}</strong> is not found\n            </>\n          ) : (\n            <>\n              <strong>Error:</strong> {error.message}\n            </>\n          ) }\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  if (data && !loading && error == null) {\n    return renderData();\n  } else if (error != null) {\n    return renderErrorResponse();\n  } else {\n    return renderSkeleton();\n  }\n}\n\nWeather.propTypes = {\n  className: PropTypes.string,\n  units: PropTypes.string,\n  cityName: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nWeather.defaultProps = {\n  className: '',\n  units: 'metric',\n  onClick: () => {},\n};\n","import { useSelector } from 'react-redux';\n\nexport function useTemperatureUnit() {\n  const units = useSelector((state) => state.weather.units);\n\n  return (text) => {\n    switch (units) {\n      case 'imperial':\n        return `${text}\\u00b0 F`;\n      case 'metric':\n        return `${text}\\u00b0 C`;\n      default:\n        return text;\n    }\n  };\n}\n","import { useSelector } from 'react-redux';\n\nexport function useSpeedUnit() {\n  const units = useSelector((state) => state.weather.units);\n\n  return (text) => {\n    switch (units) {\n      case 'imperial':\n        return `${text} miles/h`;\n      case 'metric':\n        return `${text} meter/s`;\n      default:\n        return text;\n    }\n  };\n}\n","import PropTypes from 'prop-types';\nimport { Weather } from '../weather/Weather';\nimport styles from './WeatherList.module.scss';\nimport { useState } from 'react';\n\nexport function WeatherList({ className, cities, units, onCityClick, onNewCitySubmit }) {\n  const [newCityName, setNewCityName] = useState('');\n\n  function handleNewCitySubmit(e) {\n    e.preventDefault();\n    onNewCitySubmit(newCityName);\n    setNewCityName('');\n  }\n\n  return (\n    <div className={`row ${className}`}>\n      {cities.map((city, index) => (\n        <div key={`city-weather-${index}`} className=\"col-md-4 mb-4\">\n          <Weather cityName={city} units={units} onClick={(lon, lat, cityName) => onCityClick(lon, lat, cityName)} />\n        </div>\n      ))}\n\n      <div key={`city-weather-new`} className=\"col-md-4 mb-4\">\n        <div className={styles.newCityForm}>\n          <form onSubmit={handleNewCitySubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"new-city-name\" className=\"form-label\">Add New City</label>\n              <input\n                type=\"text\" className=\"form-control\" id=\"new-city-name\" placeholder=\"Eg: Paris\"\n                value={newCityName}\n                onChange={(e) => setNewCityName(e.target.value)}\n              />\n            </div>\n\n            <div className=\"text-end\">\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={newCityName === ''}>Submit</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWeatherList.propTypes = {\n  className: PropTypes.string,\n  units: PropTypes.string,\n  cities: PropTypes.array.isRequired,\n  onCityClick: PropTypes.func,\n  onCityAdd: PropTypes.func,\n};\n\nWeatherList.defaultProps = {\n  className: '',\n  units: 'metric',\n  cities: [],\n  onCityClick: () => {},\n  onNewCitySubmit: () => {},\n};\n","import { WeatherList } from '../../components/weather-list/WeatherList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCity, openWeatherForecast } from '../../redux/app/actions';\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n  const cities = useSelector((state) => state.app.cities)\n  const units = useSelector((state) => state.weather.units)\n\n  return (\n    <div className=\"container\">\n      <WeatherList\n        cities={cities}\n        units={units}\n        onCityClick={(lon, lat, cityName) => dispatch(openWeatherForecast(lon, lat, cityName))}\n        onNewCitySubmit={(cityName) => dispatch(addCity(cityName))}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}