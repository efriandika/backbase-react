{"version":3,"sources":["components/weather/Weather.module.scss","components/weather-list/WeatherList.module.scss","components/weather/Weather.js","components/weather-list/WeatherList.js","pages/dashboard/Dashboard.js"],"names":["module","exports","Weather","className","units","cityName","onClick","useHttp","manual","data","loading","error","fetchData","cancelRequest","textTemperatureUnit","useTemperatureUnit","textSpeedUnit","useSpeedUnit","q","a","url","params","useEffect","fetchWeatherData","styles","container","coord","lon","lat","name","aria-label","weather","length","weatherIcon","src","icon","alt","main","data-testid","temperature","temp","city","country","sys","title","role","humidity","wind","speed","response","status","message","Skeleton","width","height","defaultProps","WeatherList","cities","onCityClick","onNewCitySubmit","useState","newCityName","setNewCityName","map","index","newCityForm","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","disabled","Dashboard","dispatch","useDispatch","useSelector","state","app","openWeatherForecast","addCity"],"mappings":"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","file":"static/js/3.dfd9d503.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__pvPvo\",\"temperature\":\"Weather_temperature__35WZz\",\"city\":\"Weather_city__1RdlU\",\"country\":\"Weather_country__PZFQu\",\"weatherIcon\":\"Weather_weatherIcon__ZyqDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newCityForm\":\"WeatherList_newCityForm__1mmQm\"};","import PropTypes from 'prop-types';\nimport styles from './Weather.module.scss';\nimport { useEffect } from 'react';\nimport { useHttp } from '../../libs/http/hooks/useHttp';\nimport { useTemperatureUnit } from '../../libs/unit/hooks/useTemperatureUnit';\nimport { useSpeedUnit } from '../../libs/unit/hooks/useSpeedUnit';\nimport { Skeleton } from '../skeleton/Skeleton';\n\n/**\n * To show a city weather information\n * @author efriandika\n */\nexport function Weather({ className, units, cityName, onClick }) {\n  const [{ data, loading, error }, fetchData, cancelRequest] = useHttp({}, { manual: true });\n  const textTemperatureUnit = useTemperatureUnit();\n  const textSpeedUnit = useSpeedUnit();\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    fetchWeatherData(cityName, units);\n    return () => cancelRequest();\n  }, [cityName, units]);\n  /* eslint-enabled react-hooks/exhaustive-deps */\n\n  async function fetchWeatherData(q, units) {\n    try {\n      await fetchData({\n        url: '/weather',\n        params: {\n          q,\n          units\n        },\n      });\n    } catch (e) {\n      // console.error('Failed to get weather data from the server!');\n    }\n  }\n\n  function renderWeatherIcon() {\n    if (data.weather.length > 0) {\n      return (<img className={styles.weatherIcon} src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt={data.weather[0].main} data-testid=\"weather-icon\" />);\n    } else {\n      return null;\n    }\n  }\n\n  function renderSkeleton() {\n    return (\n      <div className={`${className} ${styles.container}`}>\n        <div className={styles.temperature}><Skeleton width=\"40%\" height=\"46px\" className=\"mb-2\" /></div>\n\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}><Skeleton width=\"45%\" /></div>\n          <div className={styles.country}><Skeleton width=\"30%\" /></div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <Skeleton width=\"55px\" />\n          </div>\n          <div title=\"Wind Speed\">\n            <Skeleton width=\"70px\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderData() {\n    return (\n      <div className={`${className} ${styles.container} cursor-pointer`} onClick={() => onClick(data.coord.lon, data.coord.lat, data.name)} aria-label={`${data.name}'s weather`}>\n        {renderWeatherIcon()}\n\n        <div className={styles.temperature}>{textTemperatureUnit(data.main.temp)}</div>\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}>{data.name}</div>\n          <div className={styles.country}>{data.sys.country}</div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <i className=\"bi bi-droplet\" role=\"img\" aria-label=\"Humidity\" /> {data.main.humidity}%\n          </div>\n          <div title=\"Wind Speed\">\n            <i className=\"bi bi-wind\" role=\"img\" aria-label=\"Wind Speed\" /> {textSpeedUnit(data.wind.speed)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderErrorResponse() {\n    return (\n      <div className={`${className} ${styles.container} text-danger`}>\n        Data cannot be loaded from the server.<br />\n        {(error.response.status === 404) ? (\n          <>\n            <strong>{cityName}</strong> is not found\n          </>\n        ) : (\n          <>\n            <strong>Error:</strong> {error.message}\n          </>\n        ) }\n      </div>\n    );\n  }\n\n  if (data && !loading && error == null) {\n    return renderData();\n  } else if (error != null) {\n    return renderErrorResponse();\n  } else {\n    return renderSkeleton();\n  }\n}\n\nWeather.propTypes = {\n  /**\n   * Custom className\n   */\n  className: PropTypes.string,\n\n  /**\n   * Data Unit\n   * @see {@link https://openweathermap.org/current#dat} for more information\n   */\n  units: PropTypes.oneOf(['standard', 'imperial', 'metric']),\n\n  /**\n   * City name\n   */\n  cityName: PropTypes.string.isRequired,\n\n  /**\n   * It will be fired When weather box is clicked\n   */\n  onClick: PropTypes.func,\n};\n\nWeather.defaultProps = {\n  className: '',\n  units: 'metric',\n  onClick: () => {},\n};\n","import PropTypes from 'prop-types';\nimport { Weather } from '../weather/Weather';\nimport styles from './WeatherList.module.scss';\nimport { useState } from 'react';\n\n/**\n * To show list of city weather information\n * @author efriandika\n */\nexport function WeatherList({ className, cities, units, onCityClick, onNewCitySubmit }) {\n  const [newCityName, setNewCityName] = useState('');\n\n  /**\n   * To handle new city form then fire an event\n   */\n  function handleNewCitySubmit(e) {\n    e.preventDefault();\n    onNewCitySubmit(newCityName);\n    setNewCityName('');\n  }\n\n  return (\n    <div className={`row ${className}`}>\n      {cities.map((city, index) => (\n        <div key={`city-weather-${index}`} className=\"col-md-4 mb-4\">\n          <Weather cityName={city} units={units} onClick={(lon, lat, cityName) => onCityClick(lon, lat, cityName)} />\n        </div>\n      ))}\n\n      <div key={`city-weather-new`} className=\"col-md-4 mb-4\">\n        <div className={styles.newCityForm}>\n          <form onSubmit={handleNewCitySubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"new-city-name\" className=\"form-label\">Add New City</label>\n              <input\n                type=\"text\" className=\"form-control\" id=\"new-city-name\" placeholder=\"Eg: Paris\"\n                value={newCityName}\n                onChange={(e) => setNewCityName(e.target.value)}\n              />\n            </div>\n\n            <div className=\"text-end\">\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={newCityName === ''} aria-label=\"Add New City Button\">Submit</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWeatherList.propTypes = {\n  /**\n   * Custom className\n   */\n  className: PropTypes.string,\n\n  /**\n   * Data Unit\n   * @see {@link https://openweathermap.org/current#dat} for more information\n   */\n  units: PropTypes.oneOf(['standard', 'imperial', 'metric']),\n\n  /**\n   * List of city name\n   */\n  cities: PropTypes.array.isRequired,\n\n  /**\n   * It will be fired When an item is clicked\n   */\n  onCityClick: PropTypes.func,\n\n  /**\n   * It will be fired When new city form submitted\n   */\n  onNewCitySubmit: PropTypes.func,\n};\n\nWeatherList.defaultProps = {\n  className: '',\n  units: 'metric',\n  cities: [],\n  onCityClick: () => {},\n  onNewCitySubmit: () => {},\n};\n","import { WeatherList } from '../../components/weather-list/WeatherList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCity, openWeatherForecast } from '../../redux/app/actions';\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n  const cities = useSelector((state) => state.app.cities)\n  const units = useSelector((state) => state.weather.units)\n\n  return (\n    <div className=\"container\">\n      <WeatherList\n        cities={cities}\n        units={units}\n        onCityClick={(lon, lat, cityName) => dispatch(openWeatherForecast(lon, lat, cityName))}\n        onNewCitySubmit={(cityName) => dispatch(addCity(cityName))}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}