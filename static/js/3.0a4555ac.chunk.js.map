{"version":3,"sources":["components/weather/Weather.module.scss","components/weather-list/WeatherList.module.scss","components/weather/Weather.js","components/weather-list/WeatherList.js","pages/dashboard/Dashboard.js"],"names":["module","exports","Weather","className","units","cityName","onClick","useHttp","manual","data","loading","error","fetchData","cancelRequest","textTemperatureUnit","useTemperatureUnit","textSpeedUnit","useSpeedUnit","q","a","url","params","console","useEffect","fetchWeatherData","styles","container","coord","lon","lat","name","weather","length","weatherIcon","src","icon","alt","main","temperature","temp","city","country","sys","title","role","aria-label","humidity","wind","speed","response","status","message","Skeleton","width","height","defaultProps","WeatherList","cities","onCityClick","onNewCitySubmit","useState","newCityName","setNewCityName","map","index","newCityForm","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","disabled","Dashboard","dispatch","useDispatch","useSelector","state","app","openWeatherForecast","addCity"],"mappings":"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","file":"static/js/3.0a4555ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Weather_container__pvPvo\",\"temperature\":\"Weather_temperature__35WZz\",\"city\":\"Weather_city__1RdlU\",\"country\":\"Weather_country__PZFQu\",\"weatherIcon\":\"Weather_weatherIcon__ZyqDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newCityForm\":\"WeatherList_newCityForm__1mmQm\"};","import PropTypes from 'prop-types';\nimport styles from './Weather.module.scss';\nimport { useEffect } from 'react';\nimport { useHttp } from '../../libs/http/hooks/useHttp';\nimport { useTemperatureUnit } from '../../libs/unit/hooks/useTemperatureUnit';\nimport { useSpeedUnit } from '../../libs/unit/hooks/useSpeedUnit';\nimport { Skeleton } from '../skeleton/Skeleton';\n\nexport function Weather({ className, units, cityName, onClick }) {\n  const [{ data, loading, error }, fetchData, cancelRequest] = useHttp({}, { manual: true });\n  const textTemperatureUnit = useTemperatureUnit();\n  const textSpeedUnit = useSpeedUnit();\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  useEffect(() => {\n    fetchWeatherData(cityName, units);\n    return () => cancelRequest();\n  }, [cityName, units]);\n  /* eslint-enabled react-hooks/exhaustive-deps */\n\n  async function fetchWeatherData(q, units) {\n    try {\n      await fetchData({\n        url: '/weather',\n        params: {\n          q,\n          units\n        },\n      });\n    } catch (e) {\n      console.error('Failed to get weather data from the server!');\n    }\n  }\n\n  function renderWeatherIcon() {\n    if (data.weather.length > 0) {\n      return (<img className={styles.weatherIcon} src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt={data.weather[0].main} />);\n    } else {\n      return null;\n    }\n  }\n\n  function renderSkeleton() {\n    return (\n      <div className={`${className} ${styles.container}`}>\n        <div className={styles.temperature}><Skeleton width=\"40%\" height=\"46px\" className=\"mb-2\" /></div>\n\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}><Skeleton width=\"45%\" /></div>\n          <div className={styles.country}><Skeleton width=\"30%\" /></div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <Skeleton width=\"55px\" />\n          </div>\n          <div title=\"Wind Speed\">\n            <Skeleton width=\"70px\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderData() {\n    return (\n      <div className={`${className} ${styles.container} cursor-pointer`} onClick={() => onClick(data.coord.lon, data.coord.lat, data.name)}>\n        {renderWeatherIcon()}\n\n        <div className={styles.temperature}>{textTemperatureUnit(data.main.temp)}</div>\n        <div className=\"mb-3 line-height-condenced\">\n          <div className={styles.city}>{data.name}</div>\n          <div className={styles.country}>{data.sys.country}</div>\n        </div>\n\n        <div className=\"d-flex justify-content-between\">\n          <div title=\"Humidity\">\n            <i className=\"bi bi-droplet\" role=\"img\" aria-label=\"Humidity\" /> {data.main.humidity}%\n          </div>\n          <div title=\"Wind Speed\">\n            <i className=\"bi bi-wind\" role=\"img\" aria-label=\"Wind Speed\" /> {textSpeedUnit(data.wind.speed)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderErrorResponse() {\n    if (error) {\n      return (\n        <div className={`${className} ${styles.container} text-danger`}>\n          Data cannot be loaded from the server.<br />\n          {(error.response.status === 404) ? (\n            <>\n              <strong>{cityName}</strong> is not found\n            </>\n          ) : (\n            <>\n              <strong>Error:</strong> {error.message}\n            </>\n          ) }\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  if (data && !loading && error == null) {\n    return renderData();\n  } else if (error != null) {\n    return renderErrorResponse();\n  } else {\n    return renderSkeleton();\n  }\n}\n\nWeather.propTypes = {\n  className: PropTypes.string,\n  units: PropTypes.string,\n  cityName: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nWeather.defaultProps = {\n  className: '',\n  units: 'metric',\n  onClick: () => {},\n};\n","import PropTypes from 'prop-types';\nimport { Weather } from '../weather/Weather';\nimport styles from './WeatherList.module.scss';\nimport { useState } from 'react';\n\nexport function WeatherList({ className, cities, units, onCityClick, onNewCitySubmit }) {\n  const [newCityName, setNewCityName] = useState('');\n\n  function handleNewCitySubmit(e) {\n    e.preventDefault();\n    onNewCitySubmit(newCityName);\n    setNewCityName('');\n  }\n\n  return (\n    <div className={`row ${className}`}>\n      {cities.map((city, index) => (\n        <div key={`city-weather-${index}`} className=\"col-md-4 mb-4\">\n          <Weather cityName={city} units={units} onClick={(lon, lat, cityName) => onCityClick(lon, lat, cityName)} />\n        </div>\n      ))}\n\n      <div key={`city-weather-new`} className=\"col-md-4 mb-4\">\n        <div className={styles.newCityForm}>\n          <form onSubmit={handleNewCitySubmit}>\n            <div className=\"mb-3\">\n              <label htmlFor=\"new-city-name\" className=\"form-label\">Add New City</label>\n              <input\n                type=\"text\" className=\"form-control\" id=\"new-city-name\" placeholder=\"Eg: Paris\"\n                value={newCityName}\n                onChange={(e) => setNewCityName(e.target.value)}\n              />\n            </div>\n\n            <div className=\"text-end\">\n              <button type=\"submit\" className=\"btn btn-primary\" disabled={newCityName === ''}>Submit</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nWeatherList.propTypes = {\n  className: PropTypes.string,\n  units: PropTypes.string,\n  cities: PropTypes.array.isRequired,\n  onCityClick: PropTypes.func,\n  onCityAdd: PropTypes.func,\n};\n\nWeatherList.defaultProps = {\n  className: '',\n  units: 'metric',\n  cities: [],\n  onCityClick: () => {},\n  onNewCitySubmit: () => {},\n};\n","import { WeatherList } from '../../components/weather-list/WeatherList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addCity, openWeatherForecast } from '../../redux/app/actions';\n\nexport default function Dashboard() {\n  const dispatch = useDispatch();\n  const cities = useSelector((state) => state.app.cities)\n  const units = useSelector((state) => state.weather.units)\n\n  return (\n    <div className=\"container\">\n      <WeatherList\n        cities={cities}\n        units={units}\n        onCityClick={(lon, lat, cityName) => dispatch(openWeatherForecast(lon, lat, cityName))}\n        onNewCitySubmit={(cityName) => dispatch(addCity(cityName))}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}